[1mdiff --git a/main/game/staticfiles/js/game.js b/main/game/staticfiles/js/game.js[m
[1mindex 59d6d41..ba40f5c 100644[m
[1m--- a/main/game/staticfiles/js/game.js[m
[1m+++ b/main/game/staticfiles/js/game.js[m
[36m@@ -469,9 +469,7 @@[m [mfunction checkPowerUpCollisions() { // with player/opponent[m
 		const ballPredictedY = predictBallYAtX(475);[m
 		const pwrPredictedY = predictPowerupYAtX(475);[m
 		const ballPredictedTime = predictBallImpactTime();[m
[31m-		console.log("ball: ", ballPredictedTime);[m
 		const pwrPredictedTime = predictPowerupImpactTime();[m
[31m-		console.log("pwrUp: ", pwrPredictedTime);[m
 		const playerDistanceFromTop = player.y;[m
 		const playerDistanceFromBottom = boardHeight - (player.y + player.height);[m
 [m
[36m@@ -481,14 +479,11 @@[m [mfunction checkPowerUpCollisions() { // with player/opponent[m
 		if (hasTimeForPowerup(ballPredictedTime, pwrPredictedTime, ballPredictedY, pwrPredictedY)) {[m
 			targetY = pwrPredictedY;[m
 			isPowerup = true;[m
[31m-			// console.log("opponent: going for powerup at Y=", targetY);[m
 		} else {[m
 			targetY = ballPredictedY;[m
[31m-			// console.log("opponent: going for ball at Y =", targetY);[m
 		}[m
 	[m
 		prevTargetY = calculateTargetY(targetY, playerDistanceFromTop, playerDistanceFromBottom, isPowerup) + (Math.random() - 0.5) * 10;[m
[31m-		console.log("opponent: moving to Y=", prevTargetY);[m
 	[m
 		moveTowardsTargetY(prevTargetY);[m
 	}[m
[36m@@ -593,8 +588,6 @@[m [mfunction checkPowerUpCollisions() { // with player/opponent[m
 		const distanceToBall = Math.abs(pwrPredictedY - ballPredictedY);[m
 		const timeToBallfromPowerup = distanceToBall / opponent.speed;	[m
 		[m
[31m-		console.log('availableTime:', availableTime, 'timeToPowerup:', timeToPowerup, 'timeToBallfromPowerup:', timeToBallfromPowerup);[m
[31m-[m
 		return (timeToBallfromPowerup <= availableTime);[m
 	}[m
 [m
