"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import socket
import environ
import os
import base64
import hvac
from requests.exceptions import ConnectionError, RequestException

# Initialise environ
env = environ.Env(
    DEBUG=(bool, False)
)

# settup the vault client
client = hvac.Client(
    url='http://vault:8200',
    token= env('VAULT_DEV_ROOT_TOKEN_ID'),
)

# Function to get secret from Vault
def get_vault_secret(path, key):
    try:
        secret = client.secrets.kv.v2.read_secret_version(path=path)
        return secret['data']['data'][key]
    except (ConnectionError, RequestException) as e:
        print(f'Failed to connect to Vault server: {e}')
        return None

# Récupérer les secrets depuis Vault
POSTGRES_USER = get_vault_secret('database/credentials', 'username')
POSTGRES_PASSWORD = get_vault_secret('database/credentials', 'password')
POSTGRES_DB = get_vault_secret('database/credentials', 'dbname')
SECRET_KEY = get_vault_secret('django/secret', 'secret_key')

# try:
#     # Generate a new secret key using the transit secrets engine
#     generate_response = client.secrets.transit.generate_data_key(
#         name='django-secret-key',
#         key_type='plaintext',
#     )
#     # Decode the base64 encoded key
#     SECRET_KEY = base64.b64decode(generate_response['data']['plaintext']).decode('utf-8')
#     print('Secret key generated successfully.')
# except (ConnectionError, RequestException) as e:
#     print(f'Failed to connect to Vault server: {e}')
#     # Fallback to a default secret key or handle the error appropriately
#     SECRET_KEY = 'fallback-secret-key'


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

LOGIN_URL = '/login/'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
	'channels',
	'requests',
	"login",
	"friends",
	"home",
	"leaderboard",
	"settings",
	"API",
	"game",
    "brickbreaker",
    "multipong",
    "tourpong",
    "tourbrickbreaker",
    "mystats"
]

ASGI_APPLICATION = 'main.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CSRF_TRUSTED_ORIGINS = [
    'https://181.214.189.28',
    'https://127.0.0.1',
    'http://127.0.0.1',
    'https://localhost',
    'http://localhost',
    

]


ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Configuration de la base de données
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': POSTGRES_DB,
        'USER': POSTGRES_USER,
        'PASSWORD': POSTGRES_PASSWORD,
        'HOST': 'db',  # Nom du service Docker pour PostgreSQL
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_DIRS = [
    BASE_DIR / "login/staticfiles",
	BASE_DIR / "home/staticfiles",
	BASE_DIR / "leaderboard/staticfiles",
	BASE_DIR / "settings/staticfiles",
	BASE_DIR / "friends/staticfiles",
	BASE_DIR / "game/staticfiles",
    BASE_DIR / "brickbreaker/staticfiles",
    BASE_DIR / "multipong/staticfiles",
    BASE_DIR / "mystats/staticfiles",
    BASE_DIR / "tourpong/staticfiles",
    BASE_DIR / "tourbrickbreaker/staticfiles",
]
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
